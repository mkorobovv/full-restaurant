// Package controller_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package controller_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение истории заказов клиента
	// (GET /api/customers/{customer_id}/orders)
	GetCustomerOrderHistory(w http.ResponseWriter, r *http.Request, customerId int)
	// Список блюд и их ингредиентов
	// (GET /api/dishes/get)
	GetDishesWithIngredients(w http.ResponseWriter, r *http.Request)
	// Поиск блюд по ингредиентам
	// (GET /api/dishes/get/by-ingredients)
	GetDishesByIngredients(w http.ResponseWriter, r *http.Request)
	// Список самых популярных блюд
	// (GET /api/dishes/popular)
	GetMostPopularDishes(w http.ResponseWriter, r *http.Request)
	// Количество заказов, выполненных каждым сотрудником за период
	// (GET /api/employees/orders-count)
	GetEmployeeOrderCount(w http.ResponseWriter, r *http.Request)
	// Получение продуктов с истекающим сроком годности
	// (GET /api/products/expiring-soon)
	GetExpiringProducts(w http.ResponseWriter, r *http.Request)
	// Получение всех поставщиков для определенного продукта
	// (GET /api/products/{product_name}/suppliers)
	GetSuppliersForProduct(w http.ResponseWriter, r *http.Request, productName int)
	// Скачать отчет по финансам
	// (GET /api/report/download)
	DownloadReport(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получение истории заказов клиента
// (GET /api/customers/{customer_id}/orders)
func (_ Unimplemented) GetCustomerOrderHistory(w http.ResponseWriter, r *http.Request, customerId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список блюд и их ингредиентов
// (GET /api/dishes/get)
func (_ Unimplemented) GetDishesWithIngredients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Поиск блюд по ингредиентам
// (GET /api/dishes/get/by-ingredients)
func (_ Unimplemented) GetDishesByIngredients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список самых популярных блюд
// (GET /api/dishes/popular)
func (_ Unimplemented) GetMostPopularDishes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Количество заказов, выполненных каждым сотрудником за период
// (GET /api/employees/orders-count)
func (_ Unimplemented) GetEmployeeOrderCount(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение продуктов с истекающим сроком годности
// (GET /api/products/expiring-soon)
func (_ Unimplemented) GetExpiringProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение всех поставщиков для определенного продукта
// (GET /api/products/{product_name}/suppliers)
func (_ Unimplemented) GetSuppliersForProduct(w http.ResponseWriter, r *http.Request, productName int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Скачать отчет по финансам
// (GET /api/report/download)
func (_ Unimplemented) DownloadReport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCustomerOrderHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerOrderHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameterWithOptions("simple", "customer_id", chi.URLParam(r, "customer_id"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerOrderHistory(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDishesWithIngredients operation middleware
func (siw *ServerInterfaceWrapper) GetDishesWithIngredients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesWithIngredients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDishesByIngredients operation middleware
func (siw *ServerInterfaceWrapper) GetDishesByIngredients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesByIngredients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMostPopularDishes operation middleware
func (siw *ServerInterfaceWrapper) GetMostPopularDishes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMostPopularDishes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmployeeOrderCount operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeeOrderCount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmployeeOrderCount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExpiringProducts operation middleware
func (siw *ServerInterfaceWrapper) GetExpiringProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExpiringProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSuppliersForProduct operation middleware
func (siw *ServerInterfaceWrapper) GetSuppliersForProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "product_name" -------------
	var productName int

	err = runtime.BindStyledParameterWithOptions("simple", "product_name", chi.URLParam(r, "product_name"), &productName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "product_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSuppliersForProduct(w, r, productName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadReport operation middleware
func (siw *ServerInterfaceWrapper) DownloadReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadReport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customer_id}/orders", wrapper.GetCustomerOrderHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/get", wrapper.GetDishesWithIngredients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/get/by-ingredients", wrapper.GetDishesByIngredients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/popular", wrapper.GetMostPopularDishes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/employees/orders-count", wrapper.GetEmployeeOrderCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/products/expiring-soon", wrapper.GetExpiringProducts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/products/{product_name}/suppliers", wrapper.GetSuppliersForProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/report/download", wrapper.DownloadReport)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oZIiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
