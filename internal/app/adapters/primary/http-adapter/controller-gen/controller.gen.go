// Package controller_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package controller_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение истории заказов клиента
	// (GET /api/customers/{customer_id}/orders)
	GetCustomerOrderHistory(w http.ResponseWriter, r *http.Request, customerId int)
	// Список блюд и их ингредиентов
	// (GET /api/dishes/get)
	GetDishesWithIngredients(w http.ResponseWriter, r *http.Request)
	// Поиск блюд по ингредиентам
	// (GET /api/dishes/get/by-ingredients)
	GetDishesByIngredients(w http.ResponseWriter, r *http.Request)
	// Список блюд и их ингредиентов
	// (GET /api/dishes/get/unordered)
	GetUnorderedDishes(w http.ResponseWriter, r *http.Request)
	// Список самых популярных блюд
	// (GET /api/dishes/popular)
	GetMostPopularDishes(w http.ResponseWriter, r *http.Request)
	// Количество заказов, выполненных каждым сотрудником за период
	// (GET /api/employees/orders-count)
	GetEmployeeOrderCount(w http.ResponseWriter, r *http.Request)
	// Получение продуктов с истекающим сроком годности
	// (GET /api/products/expiring-soon)
	GetExpiringProducts(w http.ResponseWriter, r *http.Request)
	// Получение всех поставщиков для определенного продукта
	// (GET /api/products/{product_name}/suppliers)
	GetSuppliersByProduct(w http.ResponseWriter, r *http.Request, productName string)
	// Скачать отчет по финансам
	// (GET /api/report/download)
	DownloadReport(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получение истории заказов клиента
// (GET /api/customers/{customer_id}/orders)
func (_ Unimplemented) GetCustomerOrderHistory(w http.ResponseWriter, r *http.Request, customerId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список блюд и их ингредиентов
// (GET /api/dishes/get)
func (_ Unimplemented) GetDishesWithIngredients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Поиск блюд по ингредиентам
// (GET /api/dishes/get/by-ingredients)
func (_ Unimplemented) GetDishesByIngredients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список блюд и их ингредиентов
// (GET /api/dishes/get/unordered)
func (_ Unimplemented) GetUnorderedDishes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список самых популярных блюд
// (GET /api/dishes/popular)
func (_ Unimplemented) GetMostPopularDishes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Количество заказов, выполненных каждым сотрудником за период
// (GET /api/employees/orders-count)
func (_ Unimplemented) GetEmployeeOrderCount(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение продуктов с истекающим сроком годности
// (GET /api/products/expiring-soon)
func (_ Unimplemented) GetExpiringProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение всех поставщиков для определенного продукта
// (GET /api/products/{product_name}/suppliers)
func (_ Unimplemented) GetSuppliersByProduct(w http.ResponseWriter, r *http.Request, productName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Скачать отчет по финансам
// (GET /api/report/download)
func (_ Unimplemented) DownloadReport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCustomerOrderHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerOrderHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameterWithOptions("simple", "customer_id", chi.URLParam(r, "customer_id"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerOrderHistory(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDishesWithIngredients operation middleware
func (siw *ServerInterfaceWrapper) GetDishesWithIngredients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesWithIngredients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDishesByIngredients operation middleware
func (siw *ServerInterfaceWrapper) GetDishesByIngredients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesByIngredients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUnorderedDishes operation middleware
func (siw *ServerInterfaceWrapper) GetUnorderedDishes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUnorderedDishes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMostPopularDishes operation middleware
func (siw *ServerInterfaceWrapper) GetMostPopularDishes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMostPopularDishes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmployeeOrderCount operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeeOrderCount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmployeeOrderCount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExpiringProducts operation middleware
func (siw *ServerInterfaceWrapper) GetExpiringProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExpiringProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSuppliersByProduct operation middleware
func (siw *ServerInterfaceWrapper) GetSuppliersByProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "product_name" -------------
	var productName string

	err = runtime.BindStyledParameterWithOptions("simple", "product_name", chi.URLParam(r, "product_name"), &productName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "product_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSuppliersByProduct(w, r, productName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadReport operation middleware
func (siw *ServerInterfaceWrapper) DownloadReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadReport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customer_id}/orders", wrapper.GetCustomerOrderHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/get", wrapper.GetDishesWithIngredients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/get/by-ingredients", wrapper.GetDishesByIngredients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/get/unordered", wrapper.GetUnorderedDishes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/dishes/popular", wrapper.GetMostPopularDishes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/employees/orders-count", wrapper.GetEmployeeOrderCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/products/expiring-soon", wrapper.GetExpiringProducts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/products/{product_name}/suppliers", wrapper.GetSuppliersByProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/report/download", wrapper.DownloadReport)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Op3/BAAA///MAL8obSUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
